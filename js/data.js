'use strict';

window.data = (function () {
  var pictures = [];

  return {
    successHandler: function (data) {
      pictures = data;
      window.picture.renderPicture(pictures);
      window.gallery.changeSorting(pictures);
      window.gallery.openPicPopup(pictures);
    }
  };
})();

// Б1. Код соответствует ТЗ проекта
//
// Очень небрежный код, даже безалаберный. Или очень слабая или очень сильная работа наставника, зависит. Но, в любом случае, работает все кое как, тестовое задание трактовано как получится, в коде тяп ляп, половина содрана с демок и даже не обдумано как и почему что-то работает.
//
// Теперь по ошибкам из ТЗ:
// На главной странице в списке фотографий текст первого комментария выводится вместо количества комментариев, выглядит, как минимум, странно.
//
// Фотографии не открываются в полноэкранный режим при активации с клавиатуры: ставлю на фотографию фокус, нажимаю Enter или пробел и полноэкранная фотография не открывается.
//
// При втором переключении фильтра перестает работать слайдер: после перетаскивания сбрасывается в начальное состояние на котором стоял


// Б20. Все файлы JS представляют собой отдельные модули в IIFE
//
// Неправильный стиль экспорта из модулей. Мы больше не используем window.moduleName = (function() {})(), так было на прошлых интенсивах, но теперь нужно писать в window прямо внутри модуля.
//
// Много избыточных объектов: initialize-filters.js экспортирует объект filtersInit, который содержит ровно единственный метод initializeFilters. Это избыточно, должна возвращаться только функция initializeFilters и не надо ее записывать ни в какой объект. Такая же история с initializeScale, picture, debounce.
//
// window.data — бесполезный модуль, убрать его долой, его надо в gallery.js и никуда оттуда этот код не вынимать.


// Д2. Название методов и свойств объектов не содержит название объектов
//
// debounce.debounce? И так далее.

// Д3. Из названия обработчика события и функции-коллбэка следует, что это обработчик
//
// Обработчики бывают то on, то handler, то callback. Не надо так :-/

// Д5. Используется единый стиль именования переменных
//
// backend.js: вперемешку идут handler и on. onError и onLoad, но errorHandler. Который зачем-то экспортируется. Зачем кстати? Вообще этот стиль перемешивается на уровне вообще всего проекта, нужно пройтись по всем файлам и применить что-то одно.

// Д9. В случае, если одинаковый код повторяется в нескольких модулях, повторяющаяся часть вынесена в отдельный модуль
//
// Метод changeSorting, полностью

// Д14. Если при использовании условного оператора в любом случае возвращается значение, альтернативная ветка опускается
//
// Метод processingValidity. setCustomValidity нужно вызывать только один раз, в самом конце, вне всяких else, потому что этот код выполнится в любом из вариантов, меняется только сообщение внутри. Вот сообщение в условии и надо менять. Да, пожалуйста, уберите из этого метода evt. Объект evt может быть или в обработчиках или в утилитарных методах, проверяющих события, но никак в обычном методе бизнес-логики. Что если я захочу просто так, посреди кода запустить проверку валидности?

// Д17. Условия упрощены
//
// changeSorting. Код выше идентичен из-за неоптимального условия. Если в разных ветках одинаковый код — надо выносить его за ветки и внутри оставлять только то, что совпадает.
//
// В сортировках не надо вообще никаких условий: return b.comments.length - a.comments.length (ну и лайки разумеется)
//
// resetForm: document.querySelector('.upload-effect-level').classList.toggle('elementStyle', elementStyle !== 'effect-none'); // условие родом из ада, хоть я и зачел название переменной
